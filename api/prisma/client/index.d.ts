// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  haiku: (where?: HaikuWhereInput) => Promise<boolean>;
  snap: (where?: SnapWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  haiku: (where: HaikuWhereUniqueInput) => HaikuNullablePromise;
  haikus: (args?: {
    where?: HaikuWhereInput;
    orderBy?: HaikuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Haiku>;
  haikusConnection: (args?: {
    where?: HaikuWhereInput;
    orderBy?: HaikuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HaikuConnectionPromise;
  snap: (where: SnapWhereUniqueInput) => SnapNullablePromise;
  snaps: (args?: {
    where?: SnapWhereInput;
    orderBy?: SnapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Snap>;
  snapsConnection: (args?: {
    where?: SnapWhereInput;
    orderBy?: SnapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SnapConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createHaiku: (data: HaikuCreateInput) => HaikuPromise;
  updateHaiku: (args: {
    data: HaikuUpdateInput;
    where: HaikuWhereUniqueInput;
  }) => HaikuPromise;
  updateManyHaikus: (args: {
    data: HaikuUpdateManyMutationInput;
    where?: HaikuWhereInput;
  }) => BatchPayloadPromise;
  upsertHaiku: (args: {
    where: HaikuWhereUniqueInput;
    create: HaikuCreateInput;
    update: HaikuUpdateInput;
  }) => HaikuPromise;
  deleteHaiku: (where: HaikuWhereUniqueInput) => HaikuPromise;
  deleteManyHaikus: (where?: HaikuWhereInput) => BatchPayloadPromise;
  createSnap: (data: SnapCreateInput) => SnapPromise;
  updateSnap: (args: {
    data: SnapUpdateInput;
    where: SnapWhereUniqueInput;
  }) => SnapPromise;
  upsertSnap: (args: {
    where: SnapWhereUniqueInput;
    create: SnapCreateInput;
    update: SnapUpdateInput;
  }) => SnapPromise;
  deleteSnap: (where: SnapWhereUniqueInput) => SnapPromise;
  deleteManySnaps: (where?: SnapWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  haiku: (
    where?: HaikuSubscriptionWhereInput
  ) => HaikuSubscriptionPayloadSubscription;
  snap: (
    where?: SnapSubscriptionWhereInput
  ) => SnapSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SnapOrderByInput = "id_ASC" | "id_DESC";

export type HaikuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "content_ASC"
  | "content_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "netlifyID_ASC"
  | "netlifyID_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SnapCreateWithoutHaikuInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
}

export type HaikuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  slug?: Maybe<String>;
}>;

export interface UserUpdateDataInput {
  netlifyID?: Maybe<String>;
  name?: Maybe<String>;
}

export interface SnapWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  haiku?: Maybe<HaikuWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<SnapWhereInput[] | SnapWhereInput>;
  OR?: Maybe<SnapWhereInput[] | SnapWhereInput>;
  NOT?: Maybe<SnapWhereInput[] | SnapWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  netlifyID?: Maybe<String>;
  netlifyID_not?: Maybe<String>;
  netlifyID_in?: Maybe<String[] | String>;
  netlifyID_not_in?: Maybe<String[] | String>;
  netlifyID_lt?: Maybe<String>;
  netlifyID_lte?: Maybe<String>;
  netlifyID_gt?: Maybe<String>;
  netlifyID_gte?: Maybe<String>;
  netlifyID_contains?: Maybe<String>;
  netlifyID_not_contains?: Maybe<String>;
  netlifyID_starts_with?: Maybe<String>;
  netlifyID_not_starts_with?: Maybe<String>;
  netlifyID_ends_with?: Maybe<String>;
  netlifyID_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SnapCreateInput {
  id?: Maybe<ID_Input>;
  haiku: HaikuCreateOneWithoutSnapsInput;
  user: UserCreateOneInput;
}

export interface SnapUpdateWithWhereUniqueWithoutHaikuInput {
  where: SnapWhereUniqueInput;
  data: SnapUpdateWithoutHaikuDataInput;
}

export interface HaikuUpdateManyMutationInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
}

export interface SnapUpdateManyWithoutHaikuInput {
  create?: Maybe<SnapCreateWithoutHaikuInput[] | SnapCreateWithoutHaikuInput>;
  delete?: Maybe<SnapWhereUniqueInput[] | SnapWhereUniqueInput>;
  connect?: Maybe<SnapWhereUniqueInput[] | SnapWhereUniqueInput>;
  set?: Maybe<SnapWhereUniqueInput[] | SnapWhereUniqueInput>;
  disconnect?: Maybe<SnapWhereUniqueInput[] | SnapWhereUniqueInput>;
  update?: Maybe<
    | SnapUpdateWithWhereUniqueWithoutHaikuInput[]
    | SnapUpdateWithWhereUniqueWithoutHaikuInput
  >;
  upsert?: Maybe<
    | SnapUpsertWithWhereUniqueWithoutHaikuInput[]
    | SnapUpsertWithWhereUniqueWithoutHaikuInput
  >;
  deleteMany?: Maybe<SnapScalarWhereInput[] | SnapScalarWhereInput>;
}

export interface SnapSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SnapWhereInput>;
  AND?: Maybe<SnapSubscriptionWhereInput[] | SnapSubscriptionWhereInput>;
  OR?: Maybe<SnapSubscriptionWhereInput[] | SnapSubscriptionWhereInput>;
  NOT?: Maybe<SnapSubscriptionWhereInput[] | SnapSubscriptionWhereInput>;
}

export interface UserUpdateManyMutationInput {
  netlifyID?: Maybe<String>;
  name?: Maybe<String>;
}

export interface HaikuCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  content: String;
  author: UserCreateOneInput;
  snaps?: Maybe<SnapCreateManyWithoutHaikuInput>;
}

export interface HaikuUpsertWithoutSnapsInput {
  update: HaikuUpdateWithoutSnapsDataInput;
  create: HaikuCreateWithoutSnapsInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface HaikuUpdateWithoutSnapsDataInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  netlifyID: String;
  name: String;
}

export interface SnapUpdateInput {
  haiku?: Maybe<HaikuUpdateOneRequiredWithoutSnapsInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface SnapCreateManyWithoutHaikuInput {
  create?: Maybe<SnapCreateWithoutHaikuInput[] | SnapCreateWithoutHaikuInput>;
  connect?: Maybe<SnapWhereUniqueInput[] | SnapWhereUniqueInput>;
}

export interface HaikuCreateWithoutSnapsInput {
  id?: Maybe<ID_Input>;
  title: String;
  slug: String;
  content: String;
  author: UserCreateOneInput;
}

export interface SnapScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<SnapScalarWhereInput[] | SnapScalarWhereInput>;
  OR?: Maybe<SnapScalarWhereInput[] | SnapScalarWhereInput>;
  NOT?: Maybe<SnapScalarWhereInput[] | SnapScalarWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface HaikuUpdateInput {
  title?: Maybe<String>;
  slug?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredInput>;
  snaps?: Maybe<SnapUpdateManyWithoutHaikuInput>;
}

export interface UserUpdateInput {
  netlifyID?: Maybe<String>;
  name?: Maybe<String>;
}

export interface SnapUpdateWithoutHaikuDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface SnapUpsertWithWhereUniqueWithoutHaikuInput {
  where: SnapWhereUniqueInput;
  update: SnapUpdateWithoutHaikuDataInput;
  create: SnapCreateWithoutHaikuInput;
}

export interface HaikuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  slug?: Maybe<String>;
  slug_not?: Maybe<String>;
  slug_in?: Maybe<String[] | String>;
  slug_not_in?: Maybe<String[] | String>;
  slug_lt?: Maybe<String>;
  slug_lte?: Maybe<String>;
  slug_gt?: Maybe<String>;
  slug_gte?: Maybe<String>;
  slug_contains?: Maybe<String>;
  slug_not_contains?: Maybe<String>;
  slug_starts_with?: Maybe<String>;
  slug_not_starts_with?: Maybe<String>;
  slug_ends_with?: Maybe<String>;
  slug_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  snaps_every?: Maybe<SnapWhereInput>;
  snaps_some?: Maybe<SnapWhereInput>;
  snaps_none?: Maybe<SnapWhereInput>;
  AND?: Maybe<HaikuWhereInput[] | HaikuWhereInput>;
  OR?: Maybe<HaikuWhereInput[] | HaikuWhereInput>;
  NOT?: Maybe<HaikuWhereInput[] | HaikuWhereInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export type SnapWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HaikuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HaikuWhereInput>;
  AND?: Maybe<HaikuSubscriptionWhereInput[] | HaikuSubscriptionWhereInput>;
  OR?: Maybe<HaikuSubscriptionWhereInput[] | HaikuSubscriptionWhereInput>;
  NOT?: Maybe<HaikuSubscriptionWhereInput[] | HaikuSubscriptionWhereInput>;
}

export interface HaikuCreateOneWithoutSnapsInput {
  create?: Maybe<HaikuCreateWithoutSnapsInput>;
  connect?: Maybe<HaikuWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  netlifyID?: Maybe<String>;
}>;

export interface HaikuUpdateOneRequiredWithoutSnapsInput {
  create?: Maybe<HaikuCreateWithoutSnapsInput>;
  update?: Maybe<HaikuUpdateWithoutSnapsDataInput>;
  upsert?: Maybe<HaikuUpsertWithoutSnapsInput>;
  connect?: Maybe<HaikuWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  netlifyID: String;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  netlifyID: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  netlifyID: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHaiku {
  count: Int;
}

export interface AggregateHaikuPromise
  extends Promise<AggregateHaiku>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHaikuSubscription
  extends Promise<AsyncIterator<AggregateHaiku>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Snap {
  id: ID_Output;
}

export interface SnapPromise extends Promise<Snap>, Fragmentable {
  id: () => Promise<ID_Output>;
  haiku: <T = HaikuPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface SnapSubscription
  extends Promise<AsyncIterator<Snap>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  haiku: <T = HaikuSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface SnapNullablePromise
  extends Promise<Snap | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  haiku: <T = HaikuPromise>() => T;
  user: <T = UserPromise>() => T;
}

export interface SnapConnection {
  pageInfo: PageInfo;
  edges: SnapEdge[];
}

export interface SnapConnectionPromise
  extends Promise<SnapConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SnapEdge>>() => T;
  aggregate: <T = AggregateSnapPromise>() => T;
}

export interface SnapConnectionSubscription
  extends Promise<AsyncIterator<SnapConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SnapEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSnapSubscription>() => T;
}

export interface HaikuConnection {
  pageInfo: PageInfo;
  edges: HaikuEdge[];
}

export interface HaikuConnectionPromise
  extends Promise<HaikuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HaikuEdge>>() => T;
  aggregate: <T = AggregateHaikuPromise>() => T;
}

export interface HaikuConnectionSubscription
  extends Promise<AsyncIterator<HaikuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HaikuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHaikuSubscription>() => T;
}

export interface User {
  id: ID_Output;
  netlifyID: String;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  netlifyID: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  netlifyID: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  netlifyID: () => Promise<String>;
  name: () => Promise<String>;
}

export interface HaikuEdge {
  node: Haiku;
  cursor: String;
}

export interface HaikuEdgePromise extends Promise<HaikuEdge>, Fragmentable {
  node: <T = HaikuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HaikuEdgeSubscription
  extends Promise<AsyncIterator<HaikuEdge>>,
    Fragmentable {
  node: <T = HaikuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SnapPreviousValues {
  id: ID_Output;
}

export interface SnapPreviousValuesPromise
  extends Promise<SnapPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SnapPreviousValuesSubscription
  extends Promise<AsyncIterator<SnapPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateSnap {
  count: Int;
}

export interface AggregateSnapPromise
  extends Promise<AggregateSnap>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSnapSubscription
  extends Promise<AsyncIterator<AggregateSnap>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface HaikuPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  slug: String;
  content: String;
}

export interface HaikuPreviousValuesPromise
  extends Promise<HaikuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
}

export interface HaikuPreviousValuesSubscription
  extends Promise<AsyncIterator<HaikuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface HaikuSubscriptionPayload {
  mutation: MutationType;
  node: Haiku;
  updatedFields: String[];
  previousValues: HaikuPreviousValues;
}

export interface HaikuSubscriptionPayloadPromise
  extends Promise<HaikuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HaikuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HaikuPreviousValuesPromise>() => T;
}

export interface HaikuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HaikuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HaikuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HaikuPreviousValuesSubscription>() => T;
}

export interface SnapSubscriptionPayload {
  mutation: MutationType;
  node: Snap;
  updatedFields: String[];
  previousValues: SnapPreviousValues;
}

export interface SnapSubscriptionPayloadPromise
  extends Promise<SnapSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SnapPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SnapPreviousValuesPromise>() => T;
}

export interface SnapSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SnapSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SnapSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SnapPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SnapEdge {
  node: Snap;
  cursor: String;
}

export interface SnapEdgePromise extends Promise<SnapEdge>, Fragmentable {
  node: <T = SnapPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SnapEdgeSubscription
  extends Promise<AsyncIterator<SnapEdge>>,
    Fragmentable {
  node: <T = SnapSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Haiku {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  slug: String;
  content: String;
}

export interface HaikuPromise extends Promise<Haiku>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
  snaps: <T = FragmentableArray<Snap>>(args?: {
    where?: SnapWhereInput;
    orderBy?: SnapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HaikuSubscription
  extends Promise<AsyncIterator<Haiku>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  slug: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  snaps: <T = Promise<AsyncIterator<SnapSubscription>>>(args?: {
    where?: SnapWhereInput;
    orderBy?: SnapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface HaikuNullablePromise
  extends Promise<Haiku | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  slug: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
  snaps: <T = FragmentableArray<Snap>>(args?: {
    where?: SnapWhereInput;
    orderBy?: SnapOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Snap",
    embedded: false
  },
  {
    name: "Haiku",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
