module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHaiku {
  count: Int!
}

type AggregateSnap {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Haiku {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
  content: String!
  author: User!
  snaps(where: SnapWhereInput, orderBy: SnapOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snap!]
}

type HaikuConnection {
  pageInfo: PageInfo!
  edges: [HaikuEdge]!
  aggregate: AggregateHaiku!
}

input HaikuCreateInput {
  id: ID
  title: String!
  slug: String!
  content: String!
  author: UserCreateOneInput!
  snaps: SnapCreateManyWithoutHaikuInput
}

input HaikuCreateOneWithoutSnapsInput {
  create: HaikuCreateWithoutSnapsInput
  connect: HaikuWhereUniqueInput
}

input HaikuCreateWithoutSnapsInput {
  id: ID
  title: String!
  slug: String!
  content: String!
  author: UserCreateOneInput!
}

type HaikuEdge {
  node: Haiku!
  cursor: String!
}

enum HaikuOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
}

type HaikuPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  slug: String!
  content: String!
}

type HaikuSubscriptionPayload {
  mutation: MutationType!
  node: Haiku
  updatedFields: [String!]
  previousValues: HaikuPreviousValues
}

input HaikuSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HaikuWhereInput
  AND: [HaikuSubscriptionWhereInput!]
  OR: [HaikuSubscriptionWhereInput!]
  NOT: [HaikuSubscriptionWhereInput!]
}

input HaikuUpdateInput {
  title: String
  slug: String
  content: String
  author: UserUpdateOneRequiredInput
  snaps: SnapUpdateManyWithoutHaikuInput
}

input HaikuUpdateManyMutationInput {
  title: String
  slug: String
  content: String
}

input HaikuUpdateOneRequiredWithoutSnapsInput {
  create: HaikuCreateWithoutSnapsInput
  update: HaikuUpdateWithoutSnapsDataInput
  upsert: HaikuUpsertWithoutSnapsInput
  connect: HaikuWhereUniqueInput
}

input HaikuUpdateWithoutSnapsDataInput {
  title: String
  slug: String
  content: String
  author: UserUpdateOneRequiredInput
}

input HaikuUpsertWithoutSnapsInput {
  update: HaikuUpdateWithoutSnapsDataInput!
  create: HaikuCreateWithoutSnapsInput!
}

input HaikuWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: UserWhereInput
  snaps_every: SnapWhereInput
  snaps_some: SnapWhereInput
  snaps_none: SnapWhereInput
  AND: [HaikuWhereInput!]
  OR: [HaikuWhereInput!]
  NOT: [HaikuWhereInput!]
}

input HaikuWhereUniqueInput {
  id: ID
  slug: String
}

scalar Long

type Mutation {
  createHaiku(data: HaikuCreateInput!): Haiku!
  updateHaiku(data: HaikuUpdateInput!, where: HaikuWhereUniqueInput!): Haiku
  updateManyHaikus(data: HaikuUpdateManyMutationInput!, where: HaikuWhereInput): BatchPayload!
  upsertHaiku(where: HaikuWhereUniqueInput!, create: HaikuCreateInput!, update: HaikuUpdateInput!): Haiku!
  deleteHaiku(where: HaikuWhereUniqueInput!): Haiku
  deleteManyHaikus(where: HaikuWhereInput): BatchPayload!
  createSnap(data: SnapCreateInput!): Snap!
  updateSnap(data: SnapUpdateInput!, where: SnapWhereUniqueInput!): Snap
  upsertSnap(where: SnapWhereUniqueInput!, create: SnapCreateInput!, update: SnapUpdateInput!): Snap!
  deleteSnap(where: SnapWhereUniqueInput!): Snap
  deleteManySnaps(where: SnapWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  haiku(where: HaikuWhereUniqueInput!): Haiku
  haikus(where: HaikuWhereInput, orderBy: HaikuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Haiku]!
  haikusConnection(where: HaikuWhereInput, orderBy: HaikuOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HaikuConnection!
  snap(where: SnapWhereUniqueInput!): Snap
  snaps(where: SnapWhereInput, orderBy: SnapOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snap]!
  snapsConnection(where: SnapWhereInput, orderBy: SnapOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SnapConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Snap {
  id: ID!
  haiku: Haiku!
  user: User!
}

type SnapConnection {
  pageInfo: PageInfo!
  edges: [SnapEdge]!
  aggregate: AggregateSnap!
}

input SnapCreateInput {
  id: ID
  haiku: HaikuCreateOneWithoutSnapsInput!
  user: UserCreateOneInput!
}

input SnapCreateManyWithoutHaikuInput {
  create: [SnapCreateWithoutHaikuInput!]
  connect: [SnapWhereUniqueInput!]
}

input SnapCreateWithoutHaikuInput {
  id: ID
  user: UserCreateOneInput!
}

type SnapEdge {
  node: Snap!
  cursor: String!
}

enum SnapOrderByInput {
  id_ASC
  id_DESC
}

type SnapPreviousValues {
  id: ID!
}

input SnapScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  AND: [SnapScalarWhereInput!]
  OR: [SnapScalarWhereInput!]
  NOT: [SnapScalarWhereInput!]
}

type SnapSubscriptionPayload {
  mutation: MutationType!
  node: Snap
  updatedFields: [String!]
  previousValues: SnapPreviousValues
}

input SnapSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SnapWhereInput
  AND: [SnapSubscriptionWhereInput!]
  OR: [SnapSubscriptionWhereInput!]
  NOT: [SnapSubscriptionWhereInput!]
}

input SnapUpdateInput {
  haiku: HaikuUpdateOneRequiredWithoutSnapsInput
  user: UserUpdateOneRequiredInput
}

input SnapUpdateManyWithoutHaikuInput {
  create: [SnapCreateWithoutHaikuInput!]
  delete: [SnapWhereUniqueInput!]
  connect: [SnapWhereUniqueInput!]
  set: [SnapWhereUniqueInput!]
  disconnect: [SnapWhereUniqueInput!]
  update: [SnapUpdateWithWhereUniqueWithoutHaikuInput!]
  upsert: [SnapUpsertWithWhereUniqueWithoutHaikuInput!]
  deleteMany: [SnapScalarWhereInput!]
}

input SnapUpdateWithoutHaikuDataInput {
  user: UserUpdateOneRequiredInput
}

input SnapUpdateWithWhereUniqueWithoutHaikuInput {
  where: SnapWhereUniqueInput!
  data: SnapUpdateWithoutHaikuDataInput!
}

input SnapUpsertWithWhereUniqueWithoutHaikuInput {
  where: SnapWhereUniqueInput!
  update: SnapUpdateWithoutHaikuDataInput!
  create: SnapCreateWithoutHaikuInput!
}

input SnapWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  haiku: HaikuWhereInput
  user: UserWhereInput
  AND: [SnapWhereInput!]
  OR: [SnapWhereInput!]
  NOT: [SnapWhereInput!]
}

input SnapWhereUniqueInput {
  id: ID
}

type Subscription {
  haiku(where: HaikuSubscriptionWhereInput): HaikuSubscriptionPayload
  snap(where: SnapSubscriptionWhereInput): SnapSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    